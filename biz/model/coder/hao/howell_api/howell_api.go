// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package howell_api

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

type CpsType int64

const (
	CpsType_Unknow CpsType = 0
)

func (p CpsType) String() string {
	switch p {
	case CpsType_Unknow:
		return "Unknow"
	}
	return "<UNSET>"
}

func CpsTypeFromString(s string) (CpsType, error) {
	switch s {
	case "Unknow":
		return CpsType_Unknow, nil
	}
	return CpsType(0), fmt.Errorf("not a valid CpsType string")
}

func CpsTypePtr(v CpsType) *CpsType { return &v }
func (p *CpsType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CpsType(result.Int64)
	return
}

func (p *CpsType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CpsRebateDiscounts struct {
	ID       *string  `thrift:"id,1,optional" form:"id" json:"id,omitempty" query:"id"`
	AppID    *string  `thrift:"app_id,2,optional" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	Name     *string  `thrift:"name,3,optional" form:"name" json:"name,omitempty" query:"name"`
	CpsType  *CpsType `thrift:"cps_type,4,optional" form:"cps_type" json:"cps_type,omitempty" query:"cps_type"`
	JumpLink *string  `thrift:"jump_link,5,optional" form:"jump_link" json:"jump_link,omitempty" query:"jump_link"`
	Extra    *string  `thrift:"extra,6,optional" form:"extra" json:"extra,omitempty" query:"extra"`
	Status   *int32   `thrift:"status,7,optional" form:"status" json:"status,omitempty" query:"status"`
}

func NewCpsRebateDiscounts() *CpsRebateDiscounts {
	return &CpsRebateDiscounts{}
}

var CpsRebateDiscounts_ID_DEFAULT string

func (p *CpsRebateDiscounts) GetID() (v string) {
	if !p.IsSetID() {
		return CpsRebateDiscounts_ID_DEFAULT
	}
	return *p.ID
}

var CpsRebateDiscounts_AppID_DEFAULT string

func (p *CpsRebateDiscounts) GetAppID() (v string) {
	if !p.IsSetAppID() {
		return CpsRebateDiscounts_AppID_DEFAULT
	}
	return *p.AppID
}

var CpsRebateDiscounts_Name_DEFAULT string

func (p *CpsRebateDiscounts) GetName() (v string) {
	if !p.IsSetName() {
		return CpsRebateDiscounts_Name_DEFAULT
	}
	return *p.Name
}

var CpsRebateDiscounts_CpsType_DEFAULT CpsType

func (p *CpsRebateDiscounts) GetCpsType() (v CpsType) {
	if !p.IsSetCpsType() {
		return CpsRebateDiscounts_CpsType_DEFAULT
	}
	return *p.CpsType
}

var CpsRebateDiscounts_JumpLink_DEFAULT string

func (p *CpsRebateDiscounts) GetJumpLink() (v string) {
	if !p.IsSetJumpLink() {
		return CpsRebateDiscounts_JumpLink_DEFAULT
	}
	return *p.JumpLink
}

var CpsRebateDiscounts_Extra_DEFAULT string

func (p *CpsRebateDiscounts) GetExtra() (v string) {
	if !p.IsSetExtra() {
		return CpsRebateDiscounts_Extra_DEFAULT
	}
	return *p.Extra
}

var CpsRebateDiscounts_Status_DEFAULT int32

func (p *CpsRebateDiscounts) GetStatus() (v int32) {
	if !p.IsSetStatus() {
		return CpsRebateDiscounts_Status_DEFAULT
	}
	return *p.Status
}

var fieldIDToName_CpsRebateDiscounts = map[int16]string{
	1: "id",
	2: "app_id",
	3: "name",
	4: "cps_type",
	5: "jump_link",
	6: "extra",
	7: "status",
}

func (p *CpsRebateDiscounts) IsSetID() bool {
	return p.ID != nil
}

func (p *CpsRebateDiscounts) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *CpsRebateDiscounts) IsSetName() bool {
	return p.Name != nil
}

func (p *CpsRebateDiscounts) IsSetCpsType() bool {
	return p.CpsType != nil
}

func (p *CpsRebateDiscounts) IsSetJumpLink() bool {
	return p.JumpLink != nil
}

func (p *CpsRebateDiscounts) IsSetExtra() bool {
	return p.Extra != nil
}

func (p *CpsRebateDiscounts) IsSetStatus() bool {
	return p.Status != nil
}

func (p *CpsRebateDiscounts) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CpsRebateDiscounts[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CpsRebateDiscounts) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.ID = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField2(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.AppID = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField3(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField4(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := CpsType(v)
		p.CpsType = &tmp
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField5(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.JumpLink = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField6(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Extra = &v
	}
	return nil
}
func (p *CpsRebateDiscounts) ReadField7(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = &v
	}
	return nil
}

func (p *CpsRebateDiscounts) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CpsRebateDiscounts"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCpsType() {
		if err = oprot.WriteFieldBegin("cps_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.CpsType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetJumpLink() {
		if err = oprot.WriteFieldBegin("jump_link", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.JumpLink); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetExtra() {
		if err = oprot.WriteFieldBegin("extra", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Extra); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *CpsRebateDiscounts) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *CpsRebateDiscounts) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CpsRebateDiscounts(%+v)", *p)

}

type CreateCpsRebateDiscountsRequest struct {
	CrdEntity *CpsRebateDiscounts `thrift:"crd_entity,1,required" form:"crd_entity,required" json:"crd_entity,required" query:"crd_entity,required"`
}

func NewCreateCpsRebateDiscountsRequest() *CreateCpsRebateDiscountsRequest {
	return &CreateCpsRebateDiscountsRequest{}
}

var CreateCpsRebateDiscountsRequest_CrdEntity_DEFAULT *CpsRebateDiscounts

func (p *CreateCpsRebateDiscountsRequest) GetCrdEntity() (v *CpsRebateDiscounts) {
	if !p.IsSetCrdEntity() {
		return CreateCpsRebateDiscountsRequest_CrdEntity_DEFAULT
	}
	return p.CrdEntity
}

var fieldIDToName_CreateCpsRebateDiscountsRequest = map[int16]string{
	1: "crd_entity",
}

func (p *CreateCpsRebateDiscountsRequest) IsSetCrdEntity() bool {
	return p.CrdEntity != nil
}

func (p *CreateCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCrdEntity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCrdEntity = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCrdEntity {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]))
}

func (p *CreateCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {
	p.CrdEntity = NewCpsRebateDiscounts()
	if err := p.CrdEntity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("crd_entity", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CrdEntity.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsRequest(%+v)", *p)

}

type CreateCpsRebateDiscountsData struct {
	EntityID *string `thrift:"entity_id,1,optional" form:"entity_id" json:"entity_id,omitempty" query:"entity_id"`
}

func NewCreateCpsRebateDiscountsData() *CreateCpsRebateDiscountsData {
	return &CreateCpsRebateDiscountsData{}
}

var CreateCpsRebateDiscountsData_EntityID_DEFAULT string

func (p *CreateCpsRebateDiscountsData) GetEntityID() (v string) {
	if !p.IsSetEntityID() {
		return CreateCpsRebateDiscountsData_EntityID_DEFAULT
	}
	return *p.EntityID
}

var fieldIDToName_CreateCpsRebateDiscountsData = map[int16]string{
	1: "entity_id",
}

func (p *CreateCpsRebateDiscountsData) IsSetEntityID() bool {
	return p.EntityID != nil
}

func (p *CreateCpsRebateDiscountsData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsData) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EntityID = &v
	}
	return nil
}

func (p *CreateCpsRebateDiscountsData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityID() {
		if err = oprot.WriteFieldBegin("entity_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EntityID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsData(%+v)", *p)

}

type CreateCpsRebateDiscountsResponse struct {
	Data    *CreateCpsRebateDiscountsData `thrift:"data,1,optional" form:"data" json:"data,omitempty" query:"data"`
	Status  int32                         `thrift:"status,100" form:"status" json:"status" query:"status"`
	Message string                        `thrift:"message,101" form:"message" json:"message" query:"message"`
}

func NewCreateCpsRebateDiscountsResponse() *CreateCpsRebateDiscountsResponse {
	return &CreateCpsRebateDiscountsResponse{}
}

var CreateCpsRebateDiscountsResponse_Data_DEFAULT *CreateCpsRebateDiscountsData

func (p *CreateCpsRebateDiscountsResponse) GetData() (v *CreateCpsRebateDiscountsData) {
	if !p.IsSetData() {
		return CreateCpsRebateDiscountsResponse_Data_DEFAULT
	}
	return p.Data
}

func (p *CreateCpsRebateDiscountsResponse) GetStatus() (v int32) {
	return p.Status
}

func (p *CreateCpsRebateDiscountsResponse) GetMessage() (v string) {
	return p.Message
}

var fieldIDToName_CreateCpsRebateDiscountsResponse = map[int16]string{
	1:   "data",
	100: "status",
	101: "message",
}

func (p *CreateCpsRebateDiscountsResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Data = NewCreateCpsRebateDiscountsData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *CreateCpsRebateDiscountsResponse) ReadField100(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *CreateCpsRebateDiscountsResponse) ReadField101(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *CreateCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsResponse(%+v)", *p)

}

type HowellAPIService interface {
	CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error)
}

type HowellAPIServiceClient struct {
	c thrift.TClient
}

func NewHowellAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HowellAPIServiceClient {
	return &HowellAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHowellAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HowellAPIServiceClient {
	return &HowellAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHowellAPIServiceClient(c thrift.TClient) *HowellAPIServiceClient {
	return &HowellAPIServiceClient{
		c: c,
	}
}

func (p *HowellAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *HowellAPIServiceClient) CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error) {
	var _args HowellAPIServiceCreateCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellAPIServiceCreateCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "CreateCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type HowellAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HowellAPIService
}

func (p *HowellAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HowellAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HowellAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHowellAPIServiceProcessor(handler HowellAPIService) *HowellAPIServiceProcessor {
	self := &HowellAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateCpsRebateDiscounts", &howellAPIServiceProcessorCreateCpsRebateDiscounts{handler: handler})
	return self
}
func (p *HowellAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type howellAPIServiceProcessorCreateCpsRebateDiscounts struct {
	handler HowellAPIService
}

func (p *howellAPIServiceProcessorCreateCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellAPIServiceCreateCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellAPIServiceCreateCpsRebateDiscountsResult{}
	var retval *CreateCpsRebateDiscountsResponse
	if retval, err2 = p.handler.CreateCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type HowellAPIServiceCreateCpsRebateDiscountsArgs struct {
	Req *CreateCpsRebateDiscountsRequest `thrift:"req,1"`
}

func NewHowellAPIServiceCreateCpsRebateDiscountsArgs() *HowellAPIServiceCreateCpsRebateDiscountsArgs {
	return &HowellAPIServiceCreateCpsRebateDiscountsArgs{}
}

var HowellAPIServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT *CreateCpsRebateDiscountsRequest

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) GetReq() (v *CreateCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellAPIServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceCreateCpsRebateDiscountsArgs(%+v)", *p)

}

type HowellAPIServiceCreateCpsRebateDiscountsResult struct {
	Success *CreateCpsRebateDiscountsResponse `thrift:"success,0,optional"`
}

func NewHowellAPIServiceCreateCpsRebateDiscountsResult() *HowellAPIServiceCreateCpsRebateDiscountsResult {
	return &HowellAPIServiceCreateCpsRebateDiscountsResult{}
}

var HowellAPIServiceCreateCpsRebateDiscountsResult_Success_DEFAULT *CreateCpsRebateDiscountsResponse

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) GetSuccess() (v *CreateCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellAPIServiceCreateCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceCreateCpsRebateDiscountsResult(%+v)", *p)

}
