// Code generated by thriftgo (0.3.6). DO NOT EDIT.

package howell_api

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"howell/howell_api/biz/model/models"
)

type CreateCpsRebateDiscountsRequest struct {
	CrdEntity *models.CpsRebateDiscounts `thrift:"crd_entity,1,required" form:"crd_entity,required" json:"crd_entity,required" query:"crd_entity,required"`
}

func NewCreateCpsRebateDiscountsRequest() *CreateCpsRebateDiscountsRequest {
	return &CreateCpsRebateDiscountsRequest{}
}

var CreateCpsRebateDiscountsRequest_CrdEntity_DEFAULT *models.CpsRebateDiscounts

func (p *CreateCpsRebateDiscountsRequest) GetCrdEntity() (v *models.CpsRebateDiscounts) {
	if !p.IsSetCrdEntity() {
		return CreateCpsRebateDiscountsRequest_CrdEntity_DEFAULT
	}
	return p.CrdEntity
}

var fieldIDToName_CreateCpsRebateDiscountsRequest = map[int16]string{
	1: "crd_entity",
}

func (p *CreateCpsRebateDiscountsRequest) IsSetCrdEntity() bool {
	return p.CrdEntity != nil
}

func (p *CreateCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCrdEntity bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCrdEntity = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCrdEntity {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateCpsRebateDiscountsRequest[fieldId]))
}

func (p *CreateCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {
	p.CrdEntity = models.NewCpsRebateDiscounts()
	if err := p.CrdEntity.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *CreateCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("crd_entity", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.CrdEntity.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsRequest(%+v)", *p)

}

type CreateCpsRebateDiscountsData struct {
	EntityID *string `thrift:"entity_id,1,optional" form:"entity_id" json:"entity_id,omitempty" query:"entity_id"`
}

func NewCreateCpsRebateDiscountsData() *CreateCpsRebateDiscountsData {
	return &CreateCpsRebateDiscountsData{}
}

var CreateCpsRebateDiscountsData_EntityID_DEFAULT string

func (p *CreateCpsRebateDiscountsData) GetEntityID() (v string) {
	if !p.IsSetEntityID() {
		return CreateCpsRebateDiscountsData_EntityID_DEFAULT
	}
	return *p.EntityID
}

var fieldIDToName_CreateCpsRebateDiscountsData = map[int16]string{
	1: "entity_id",
}

func (p *CreateCpsRebateDiscountsData) IsSetEntityID() bool {
	return p.EntityID != nil
}

func (p *CreateCpsRebateDiscountsData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsData) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EntityID = &v
	}
	return nil
}

func (p *CreateCpsRebateDiscountsData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityID() {
		if err = oprot.WriteFieldBegin("entity_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EntityID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsData(%+v)", *p)

}

type CreateCpsRebateDiscountsResponse struct {
	Data    *CreateCpsRebateDiscountsData `thrift:"data,1,optional" form:"data" json:"data,omitempty" query:"data"`
	Status  int32                         `thrift:"status,100" form:"status" json:"status" query:"status"`
	Message string                        `thrift:"message,101" form:"message" json:"message" query:"message"`
}

func NewCreateCpsRebateDiscountsResponse() *CreateCpsRebateDiscountsResponse {
	return &CreateCpsRebateDiscountsResponse{}
}

var CreateCpsRebateDiscountsResponse_Data_DEFAULT *CreateCpsRebateDiscountsData

func (p *CreateCpsRebateDiscountsResponse) GetData() (v *CreateCpsRebateDiscountsData) {
	if !p.IsSetData() {
		return CreateCpsRebateDiscountsResponse_Data_DEFAULT
	}
	return p.Data
}

func (p *CreateCpsRebateDiscountsResponse) GetStatus() (v int32) {
	return p.Status
}

func (p *CreateCpsRebateDiscountsResponse) GetMessage() (v string) {
	return p.Message
}

var fieldIDToName_CreateCpsRebateDiscountsResponse = map[int16]string{
	1:   "data",
	100: "status",
	101: "message",
}

func (p *CreateCpsRebateDiscountsResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *CreateCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Data = NewCreateCpsRebateDiscountsData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *CreateCpsRebateDiscountsResponse) ReadField100(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *CreateCpsRebateDiscountsResponse) ReadField101(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *CreateCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *CreateCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCpsRebateDiscountsResponse(%+v)", *p)

}

type GetCpsRebateDiscountsRequest struct {
	EntityID string `thrift:"entity_id,1,required" form:"entity_id,required" json:"entity_id,required" query:"entity_id,required"`
}

func NewGetCpsRebateDiscountsRequest() *GetCpsRebateDiscountsRequest {
	return &GetCpsRebateDiscountsRequest{}
}

func (p *GetCpsRebateDiscountsRequest) GetEntityID() (v string) {
	return p.EntityID
}

var fieldIDToName_GetCpsRebateDiscountsRequest = map[int16]string{
	1: "entity_id",
}

func (p *GetCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEntityID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEntityID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEntityID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetCpsRebateDiscountsRequest[fieldId]))
}

func (p *GetCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.EntityID = v
	}
	return nil
}

func (p *GetCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("entity_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EntityID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCpsRebateDiscountsRequest(%+v)", *p)

}

type GetCpsRebateDiscountsData struct {
	Info    *models.CpsRebateDiscounts `thrift:"info,1,optional" form:"info" json:"info,omitempty" query:"info"`
	Status  int32                      `thrift:"status,100" form:"status" json:"status" query:"status"`
	Message string                     `thrift:"message,101" form:"message" json:"message" query:"message"`
}

func NewGetCpsRebateDiscountsData() *GetCpsRebateDiscountsData {
	return &GetCpsRebateDiscountsData{}
}

var GetCpsRebateDiscountsData_Info_DEFAULT *models.CpsRebateDiscounts

func (p *GetCpsRebateDiscountsData) GetInfo() (v *models.CpsRebateDiscounts) {
	if !p.IsSetInfo() {
		return GetCpsRebateDiscountsData_Info_DEFAULT
	}
	return p.Info
}

func (p *GetCpsRebateDiscountsData) GetStatus() (v int32) {
	return p.Status
}

func (p *GetCpsRebateDiscountsData) GetMessage() (v string) {
	return p.Message
}

var fieldIDToName_GetCpsRebateDiscountsData = map[int16]string{
	1:   "info",
	100: "status",
	101: "message",
}

func (p *GetCpsRebateDiscountsData) IsSetInfo() bool {
	return p.Info != nil
}

func (p *GetCpsRebateDiscountsData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCpsRebateDiscountsData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCpsRebateDiscountsData) ReadField1(iprot thrift.TProtocol) error {
	p.Info = models.NewCpsRebateDiscounts()
	if err := p.Info.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetCpsRebateDiscountsData) ReadField100(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *GetCpsRebateDiscountsData) ReadField101(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetCpsRebateDiscountsData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCpsRebateDiscountsData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCpsRebateDiscountsData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInfo() {
		if err = oprot.WriteFieldBegin("info", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Info.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCpsRebateDiscountsData) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *GetCpsRebateDiscountsData) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *GetCpsRebateDiscountsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCpsRebateDiscountsData(%+v)", *p)

}

type GetCpsRebateDiscountsResponse struct {
	Data    *GetCpsRebateDiscountsData `thrift:"data,1,optional" form:"data" json:"data,omitempty" query:"data"`
	Status  int32                      `thrift:"status,100" form:"status" json:"status" query:"status"`
	Message string                     `thrift:"message,101" form:"message" json:"message" query:"message"`
}

func NewGetCpsRebateDiscountsResponse() *GetCpsRebateDiscountsResponse {
	return &GetCpsRebateDiscountsResponse{}
}

var GetCpsRebateDiscountsResponse_Data_DEFAULT *GetCpsRebateDiscountsData

func (p *GetCpsRebateDiscountsResponse) GetData() (v *GetCpsRebateDiscountsData) {
	if !p.IsSetData() {
		return GetCpsRebateDiscountsResponse_Data_DEFAULT
	}
	return p.Data
}

func (p *GetCpsRebateDiscountsResponse) GetStatus() (v int32) {
	return p.Status
}

func (p *GetCpsRebateDiscountsResponse) GetMessage() (v string) {
	return p.Message
}

var fieldIDToName_GetCpsRebateDiscountsResponse = map[int16]string{
	1:   "data",
	100: "status",
	101: "message",
}

func (p *GetCpsRebateDiscountsResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Data = NewGetCpsRebateDiscountsData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *GetCpsRebateDiscountsResponse) ReadField100(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *GetCpsRebateDiscountsResponse) ReadField101(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *GetCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *GetCpsRebateDiscountsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *GetCpsRebateDiscountsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *GetCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetCpsRebateDiscountsResponse(%+v)", *p)

}

type QueryCpsRebateDiscountsRequest struct {
	EntityIDList []string `thrift:"entity_id_list,1,optional" form:"entity_id_list" json:"entity_id_list,omitempty" query:"entity_id_list"`
	PageIndex    int32    `thrift:"page_index,99,required" form:"page_index,required" json:"page_index,required" query:"page_index,required"`
	PageSize     int32    `thrift:"page_size,100,required" form:"page_size,required" json:"page_size,required" query:"page_size,required"`
}

func NewQueryCpsRebateDiscountsRequest() *QueryCpsRebateDiscountsRequest {
	return &QueryCpsRebateDiscountsRequest{}
}

var QueryCpsRebateDiscountsRequest_EntityIDList_DEFAULT []string

func (p *QueryCpsRebateDiscountsRequest) GetEntityIDList() (v []string) {
	if !p.IsSetEntityIDList() {
		return QueryCpsRebateDiscountsRequest_EntityIDList_DEFAULT
	}
	return p.EntityIDList
}

func (p *QueryCpsRebateDiscountsRequest) GetPageIndex() (v int32) {
	return p.PageIndex
}

func (p *QueryCpsRebateDiscountsRequest) GetPageSize() (v int32) {
	return p.PageSize
}

var fieldIDToName_QueryCpsRebateDiscountsRequest = map[int16]string{
	1:   "entity_id_list",
	99:  "page_index",
	100: "page_size",
}

func (p *QueryCpsRebateDiscountsRequest) IsSetEntityIDList() bool {
	return p.EntityIDList != nil
}

func (p *QueryCpsRebateDiscountsRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPageIndex bool = false
	var issetPageSize bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 99:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField99(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageIndex = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetPageSize = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPageIndex {
		fieldId = 99
		goto RequiredFieldNotSetError
	}

	if !issetPageSize {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryCpsRebateDiscountsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryCpsRebateDiscountsRequest[fieldId]))
}

func (p *QueryCpsRebateDiscountsRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.EntityIDList = make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.EntityIDList = append(p.EntityIDList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField99(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageIndex = v
	}
	return nil
}
func (p *QueryCpsRebateDiscountsRequest) ReadField100(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.PageSize = v
	}
	return nil
}

func (p *QueryCpsRebateDiscountsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscountsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField99(oprot); err != nil {
			fieldId = 99
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityIDList() {
		if err = oprot.WriteFieldBegin("entity_id_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.EntityIDList)); err != nil {
			return err
		}
		for _, v := range p.EntityIDList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField99(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_index", thrift.I32, 99); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageIndex); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 99 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("page_size", thrift.I32, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.PageSize); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryCpsRebateDiscountsRequest(%+v)", *p)

}

type QueryCpsRebateDiscountsData struct {
	ItemList   []*models.CpsRebateDiscounts `thrift:"item_list,1,optional" form:"item_list" json:"item_list,omitempty" query:"item_list"`
	Pagination *models.Pagination           `thrift:"pagination,100,required" form:"pagination,required" json:"pagination,required" query:"pagination,required"`
}

func NewQueryCpsRebateDiscountsData() *QueryCpsRebateDiscountsData {
	return &QueryCpsRebateDiscountsData{}
}

var QueryCpsRebateDiscountsData_ItemList_DEFAULT []*models.CpsRebateDiscounts

func (p *QueryCpsRebateDiscountsData) GetItemList() (v []*models.CpsRebateDiscounts) {
	if !p.IsSetItemList() {
		return QueryCpsRebateDiscountsData_ItemList_DEFAULT
	}
	return p.ItemList
}

var QueryCpsRebateDiscountsData_Pagination_DEFAULT *models.Pagination

func (p *QueryCpsRebateDiscountsData) GetPagination() (v *models.Pagination) {
	if !p.IsSetPagination() {
		return QueryCpsRebateDiscountsData_Pagination_DEFAULT
	}
	return p.Pagination
}

var fieldIDToName_QueryCpsRebateDiscountsData = map[int16]string{
	1:   "item_list",
	100: "pagination",
}

func (p *QueryCpsRebateDiscountsData) IsSetItemList() bool {
	return p.ItemList != nil
}

func (p *QueryCpsRebateDiscountsData) IsSetPagination() bool {
	return p.Pagination != nil
}

func (p *QueryCpsRebateDiscountsData) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetPagination bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
				issetPagination = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetPagination {
		fieldId = 100
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryCpsRebateDiscountsData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_QueryCpsRebateDiscountsData[fieldId]))
}

func (p *QueryCpsRebateDiscountsData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ItemList = make([]*models.CpsRebateDiscounts, 0, size)
	for i := 0; i < size; i++ {
		_elem := models.NewCpsRebateDiscounts()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.ItemList = append(p.ItemList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsData) ReadField100(iprot thrift.TProtocol) error {
	p.Pagination = models.NewPagination()
	if err := p.Pagination.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *QueryCpsRebateDiscountsData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscountsData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemList() {
		if err = oprot.WriteFieldBegin("item_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemList)); err != nil {
			return err
		}
		for _, v := range p.ItemList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsData) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("pagination", thrift.STRUCT, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Pagination.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryCpsRebateDiscountsData(%+v)", *p)

}

type QueryCpsRebateDiscountsResponse struct {
	Data    *QueryCpsRebateDiscountsData `thrift:"data,1,optional" form:"data" json:"data,omitempty" query:"data"`
	Status  int32                        `thrift:"status,100" form:"status" json:"status" query:"status"`
	Message string                       `thrift:"message,101" form:"message" json:"message" query:"message"`
}

func NewQueryCpsRebateDiscountsResponse() *QueryCpsRebateDiscountsResponse {
	return &QueryCpsRebateDiscountsResponse{}
}

var QueryCpsRebateDiscountsResponse_Data_DEFAULT *QueryCpsRebateDiscountsData

func (p *QueryCpsRebateDiscountsResponse) GetData() (v *QueryCpsRebateDiscountsData) {
	if !p.IsSetData() {
		return QueryCpsRebateDiscountsResponse_Data_DEFAULT
	}
	return p.Data
}

func (p *QueryCpsRebateDiscountsResponse) GetStatus() (v int32) {
	return p.Status
}

func (p *QueryCpsRebateDiscountsResponse) GetMessage() (v string) {
	return p.Message
}

var fieldIDToName_QueryCpsRebateDiscountsResponse = map[int16]string{
	1:   "data",
	100: "status",
	101: "message",
}

func (p *QueryCpsRebateDiscountsResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *QueryCpsRebateDiscountsResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_QueryCpsRebateDiscountsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Data = NewQueryCpsRebateDiscountsData()
	if err := p.Data.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *QueryCpsRebateDiscountsResponse) ReadField100(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}
func (p *QueryCpsRebateDiscountsResponse) ReadField101(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *QueryCpsRebateDiscountsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscountsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 100); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 101); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *QueryCpsRebateDiscountsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("QueryCpsRebateDiscountsResponse(%+v)", *p)

}

type HowellAPIService interface {
	CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error)

	GetCpsRebateDiscounts(ctx context.Context, req *GetCpsRebateDiscountsRequest) (r *GetCpsRebateDiscountsResponse, err error)

	QueryCpsRebateDiscounts(ctx context.Context, req *QueryCpsRebateDiscountsRequest) (r *QueryCpsRebateDiscountsResponse, err error)
}

type HowellAPIServiceClient struct {
	c thrift.TClient
}

func NewHowellAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HowellAPIServiceClient {
	return &HowellAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewHowellAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HowellAPIServiceClient {
	return &HowellAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewHowellAPIServiceClient(c thrift.TClient) *HowellAPIServiceClient {
	return &HowellAPIServiceClient{
		c: c,
	}
}

func (p *HowellAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *HowellAPIServiceClient) CreateCpsRebateDiscounts(ctx context.Context, req *CreateCpsRebateDiscountsRequest) (r *CreateCpsRebateDiscountsResponse, err error) {
	var _args HowellAPIServiceCreateCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellAPIServiceCreateCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "CreateCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *HowellAPIServiceClient) GetCpsRebateDiscounts(ctx context.Context, req *GetCpsRebateDiscountsRequest) (r *GetCpsRebateDiscountsResponse, err error) {
	var _args HowellAPIServiceGetCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellAPIServiceGetCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "GetCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *HowellAPIServiceClient) QueryCpsRebateDiscounts(ctx context.Context, req *QueryCpsRebateDiscountsRequest) (r *QueryCpsRebateDiscountsResponse, err error) {
	var _args HowellAPIServiceQueryCpsRebateDiscountsArgs
	_args.Req = req
	var _result HowellAPIServiceQueryCpsRebateDiscountsResult
	if err = p.Client_().Call(ctx, "QueryCpsRebateDiscounts", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type HowellAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      HowellAPIService
}

func (p *HowellAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HowellAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *HowellAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHowellAPIServiceProcessor(handler HowellAPIService) *HowellAPIServiceProcessor {
	self := &HowellAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateCpsRebateDiscounts", &howellAPIServiceProcessorCreateCpsRebateDiscounts{handler: handler})
	self.AddToProcessorMap("GetCpsRebateDiscounts", &howellAPIServiceProcessorGetCpsRebateDiscounts{handler: handler})
	self.AddToProcessorMap("QueryCpsRebateDiscounts", &howellAPIServiceProcessorQueryCpsRebateDiscounts{handler: handler})
	return self
}
func (p *HowellAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type howellAPIServiceProcessorCreateCpsRebateDiscounts struct {
	handler HowellAPIService
}

func (p *howellAPIServiceProcessorCreateCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellAPIServiceCreateCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellAPIServiceCreateCpsRebateDiscountsResult{}
	var retval *CreateCpsRebateDiscountsResponse
	if retval, err2 = p.handler.CreateCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type howellAPIServiceProcessorGetCpsRebateDiscounts struct {
	handler HowellAPIService
}

func (p *howellAPIServiceProcessorGetCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellAPIServiceGetCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellAPIServiceGetCpsRebateDiscountsResult{}
	var retval *GetCpsRebateDiscountsResponse
	if retval, err2 = p.handler.GetCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("GetCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type howellAPIServiceProcessorQueryCpsRebateDiscounts struct {
	handler HowellAPIService
}

func (p *howellAPIServiceProcessorQueryCpsRebateDiscounts) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := HowellAPIServiceQueryCpsRebateDiscountsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("QueryCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := HowellAPIServiceQueryCpsRebateDiscountsResult{}
	var retval *QueryCpsRebateDiscountsResponse
	if retval, err2 = p.handler.QueryCpsRebateDiscounts(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing QueryCpsRebateDiscounts: "+err2.Error())
		oprot.WriteMessageBegin("QueryCpsRebateDiscounts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("QueryCpsRebateDiscounts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type HowellAPIServiceCreateCpsRebateDiscountsArgs struct {
	Req *CreateCpsRebateDiscountsRequest `thrift:"req,1"`
}

func NewHowellAPIServiceCreateCpsRebateDiscountsArgs() *HowellAPIServiceCreateCpsRebateDiscountsArgs {
	return &HowellAPIServiceCreateCpsRebateDiscountsArgs{}
}

var HowellAPIServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT *CreateCpsRebateDiscountsRequest

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) GetReq() (v *CreateCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellAPIServiceCreateCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewCreateCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceCreateCpsRebateDiscountsArgs(%+v)", *p)

}

type HowellAPIServiceCreateCpsRebateDiscountsResult struct {
	Success *CreateCpsRebateDiscountsResponse `thrift:"success,0,optional"`
}

func NewHowellAPIServiceCreateCpsRebateDiscountsResult() *HowellAPIServiceCreateCpsRebateDiscountsResult {
	return &HowellAPIServiceCreateCpsRebateDiscountsResult{}
}

var HowellAPIServiceCreateCpsRebateDiscountsResult_Success_DEFAULT *CreateCpsRebateDiscountsResponse

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) GetSuccess() (v *CreateCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellAPIServiceCreateCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceCreateCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewCreateCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellAPIServiceCreateCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceCreateCpsRebateDiscountsResult(%+v)", *p)

}

type HowellAPIServiceGetCpsRebateDiscountsArgs struct {
	Req *GetCpsRebateDiscountsRequest `thrift:"req,1"`
}

func NewHowellAPIServiceGetCpsRebateDiscountsArgs() *HowellAPIServiceGetCpsRebateDiscountsArgs {
	return &HowellAPIServiceGetCpsRebateDiscountsArgs{}
}

var HowellAPIServiceGetCpsRebateDiscountsArgs_Req_DEFAULT *GetCpsRebateDiscountsRequest

func (p *HowellAPIServiceGetCpsRebateDiscountsArgs) GetReq() (v *GetCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellAPIServiceGetCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_HowellAPIServiceGetCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellAPIServiceGetCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellAPIServiceGetCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceGetCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceGetCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewGetCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceGetCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceGetCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellAPIServiceGetCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceGetCpsRebateDiscountsArgs(%+v)", *p)

}

type HowellAPIServiceGetCpsRebateDiscountsResult struct {
	Success *GetCpsRebateDiscountsResponse `thrift:"success,0,optional"`
}

func NewHowellAPIServiceGetCpsRebateDiscountsResult() *HowellAPIServiceGetCpsRebateDiscountsResult {
	return &HowellAPIServiceGetCpsRebateDiscountsResult{}
}

var HowellAPIServiceGetCpsRebateDiscountsResult_Success_DEFAULT *GetCpsRebateDiscountsResponse

func (p *HowellAPIServiceGetCpsRebateDiscountsResult) GetSuccess() (v *GetCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellAPIServiceGetCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_HowellAPIServiceGetCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellAPIServiceGetCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellAPIServiceGetCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceGetCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceGetCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewGetCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceGetCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceGetCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellAPIServiceGetCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceGetCpsRebateDiscountsResult(%+v)", *p)

}

type HowellAPIServiceQueryCpsRebateDiscountsArgs struct {
	Req *QueryCpsRebateDiscountsRequest `thrift:"req,1"`
}

func NewHowellAPIServiceQueryCpsRebateDiscountsArgs() *HowellAPIServiceQueryCpsRebateDiscountsArgs {
	return &HowellAPIServiceQueryCpsRebateDiscountsArgs{}
}

var HowellAPIServiceQueryCpsRebateDiscountsArgs_Req_DEFAULT *QueryCpsRebateDiscountsRequest

func (p *HowellAPIServiceQueryCpsRebateDiscountsArgs) GetReq() (v *QueryCpsRebateDiscountsRequest) {
	if !p.IsSetReq() {
		return HowellAPIServiceQueryCpsRebateDiscountsArgs_Req_DEFAULT
	}
	return p.Req
}

var fieldIDToName_HowellAPIServiceQueryCpsRebateDiscountsArgs = map[int16]string{
	1: "req",
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceQueryCpsRebateDiscountsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewQueryCpsRebateDiscountsRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscounts_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceQueryCpsRebateDiscountsArgs(%+v)", *p)

}

type HowellAPIServiceQueryCpsRebateDiscountsResult struct {
	Success *QueryCpsRebateDiscountsResponse `thrift:"success,0,optional"`
}

func NewHowellAPIServiceQueryCpsRebateDiscountsResult() *HowellAPIServiceQueryCpsRebateDiscountsResult {
	return &HowellAPIServiceQueryCpsRebateDiscountsResult{}
}

var HowellAPIServiceQueryCpsRebateDiscountsResult_Success_DEFAULT *QueryCpsRebateDiscountsResponse

func (p *HowellAPIServiceQueryCpsRebateDiscountsResult) GetSuccess() (v *QueryCpsRebateDiscountsResponse) {
	if !p.IsSetSuccess() {
		return HowellAPIServiceQueryCpsRebateDiscountsResult_Success_DEFAULT
	}
	return p.Success
}

var fieldIDToName_HowellAPIServiceQueryCpsRebateDiscountsResult = map[int16]string{
	0: "success",
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_HowellAPIServiceQueryCpsRebateDiscountsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewQueryCpsRebateDiscountsResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("QueryCpsRebateDiscounts_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *HowellAPIServiceQueryCpsRebateDiscountsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("HowellAPIServiceQueryCpsRebateDiscountsResult(%+v)", *p)

}
